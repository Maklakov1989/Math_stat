# -*- coding: utf-8 -*-
"""Мат_стат.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1slHIf2bvJFJ3aJRjgO1PZRhhm-Z-YvUt
"""

# Даны значения зарплат из выборки выпускников: 100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150. 
# Посчитать (желательно без использования статистических методов наподобие std, var, mean) среднее арифметическое, 
# среднее квадратичное отклонение, смещенную и несмещенную оценки дисперсий для данной выборки.

import numpy as np
from math import factorial

arr=np.array = [100, 80, 75, 77, 89, 33, 45, 25, 65, 17, 30, 24, 57, 55, 70, 75, 65, 84, 90, 150]
def mean_value(array):
    return sum(array)/len(array)
print(f'Среднее арифметическое для данной выборки М(Х) = {mean_value(arr): .2f}')

def mean_square_deviation(array):
    square_dev=(array-mean_value(array))**2
    return (sum(square_dev)/len(square_dev))**(1/2)
    
print(f'Среднее квадратичное отклонение для данной выборки SD = {round(np.std(arr),4)}')

def dispers(array, no_off=False):
#аргумент no_off отвечает за расчет смещенной, или несмещенной оценки дисперсии. По умолчанио расчитывается смещенная.#
    square_dev=(array-mean_value(array))**2
    return sum(square_dev)/(len(square_dev)-1) if no_off else sum(square_dev)/len(square_dev)
print(f'Смещенная оценка дисперсии для данной выборки D = {round(np.var(arr),4)}\n' +
      f'Немещенная оценка дисперсии для данной выборки D = {round(np.var(arr, ddof=1),4)}'
     )

# В первом ящике находится 8 мячей, из которых 5 - белые. Во втором ящике - 12 мячей, 
# из которых 5 белых. Из первого ящика вытаскивают случайным образом два мяча, из второго - 4. 
# Какова вероятность того, что 3 мяча белые?

def combinations(n,k):
    return factorial(n)/(factorial(k)*factorial(n-k))

P1=(combinations(3,2)/combinations(8,2))*(combinations(5,3)*combinations(7,1)/combinations(12,4))
print(f'Вероятность события "из первой корзины не вытащили ни одного белого мяча'
      f', из второй вытащили 3 белых мяча"\nP(A1) = {P1: .4f}'
     )
P2=(combinations(5,1)*combinations(3,1)*combinations(5,2)*combinations(7,2))/(combinations(8,2)*combinations(12,4))
print(f'Вероятность события "из первой корзины вытащили 1 белый мяч'
      f', из второй вытащили 2 белых мяча"\nP(A2) = {P2: .4f}'
     )
P3=(combinations(5,2)*combinations(5,1)*combinations(7,3))/(combinations(8,2)*combinations(12,4))
print(f'Вероятность события "из первой корзины вытащили 2 белых мяча'
      f', из второй вытащили 1 белый мяч"\nP(A2) = {P3: .4f}'
     )
P3=(combinations(5,2)*combinations(5,1)*combinations(7,3))/(combinations(8,2)*combinations(12,4))
print(f'Вероятность события "из первой корзины вытащили 2 белых мяча'
      f', из второй вытащили 1 белый мяч"\nP(A2) = {P3: .4f}'
     )

# В университет на факультеты A и B поступило равное количество студентов, 
# а на факультет C студентов поступило столько же, сколько на A и B вместе. 
# Вероятность того, что студент факультета A сдаст первую сессию, равна 0.8. 
# Для студента факультета B эта вероятность равна 0.7, а для студента факультета C - 0.9. 
# Студент сдал первую сессию. Какова вероятность, что он учится:
# a) на факультете A;
# б) на факультете B;
# в) на факультете C?
PD=0.25*0.8+0.25*0.7+0.5*0.9
print(f'Полная вероятность наступления события D, P(D) = {PD}.')
PDSA=0.25*0.8/PD
PDSB=0.25*0.7/PD
PDSC=0.5*0.9/PD
print(f'Вероятность того, что студент учится на факультете А: {PDSA: .4f};\n'
      f'Вероятность того, что студент учится на факультете B: {PDSB: .4f};\n'
      f'Вероятность того, что студент учится на факультете C: {PDSC: .4f}.'
      )

# Устройство состоит из трех деталей. Для первой детали вероятность выйти из строя в первый месяц равна 0.1, для второй - 0.2, для третьей - 0.25. 
# Какова вероятность того, что в первый месяц выйдут из строя: 
# а). все детали 
# б). только две детали 
# в). хотя бы одна деталь 
# г). от одной до двух деталей?

P3=0.1*0.2*0.25
print(f'Вероятность того, что из строя выйдут все детали Р(3) = {P3: .4f}')
P2=0.1*0.2*0.75+0.1*0.25*0.8+0.2*0.25*0.9
print(f'Вероятность того, что из строя выйдут только 2 детали Р(2) = {P2: .4f}')
P0=0.9*0.8*0.75
print(f'Вероятность того, что из строя не выйдет ни одной детали Р(0) = {P0: .4f}')
P_0=1-P0
print(f'Вероятность того, что выйдет из строя хотя бы одна деталь Р(>=1) = {P_0: .4f}')

P1=0.1*0.8*0.75+0.2*0.9*0.75+0.25*0.9*0.8
print(f'Вероятность того, что выйдет из строя одна деталь Р(1) = {P1: .4f}')

# Случайная непрерывная величина A имеет равномерное распределение на промежутке (200, 800].
# Найдите ее среднее значение и дисперсию.

def mean_and_variance(a,b):
    return f'На промежутке ({a};{b}]\nСреднее значение: М(А) = {(a+b)/2: .2f}\nДисперсия: D(A) = {((b-a)**2)/12: .2f}'
print(mean_and_variance(200,800))

# О случайной непрерывной равномерно распределенной величине B известно, что ее дисперсия равна 0.2.
# Можно ли найти правую границу величины B и ее среднее значение зная, что левая граница равна 0.5?
# Если да, найдите ее.

b=0.5+2.4**(1/2)
print(f'Левая граница распределения величины В - b = {b: .3f}\n'
      f'Среднее значение В на промежутке (0.5; {b: .3f}) M(B) = {(b+0.5)/2: .3f}'     
     )

# Рост взрослого населения города X имеет нормальное распределение.
# Причем, средний рост равен 174 см, а среднее квадратичное отклонение равно 8 см.
# Какова вероятность того, что случайным образом выбранный взрослый человек имеет рост:
# а). больше 182 см
# б). больше 190 см
# в). от 166 см до 190 см
# г). от 166 см до 182 см
# д). от 158 см до 190 см
# е). не выше 150 см или не ниже 190 см
# ё). не выше 150 см или не ниже 198 см
from statistics import NormalDist
def z_value(height):
    return (height-174)/8
print(f'Z значениe {z_value(182)} для роста 182')
NormalDist().cdf(z_value(182))
P=1-NormalDist().cdf(z_value(182))
print(f'Вероятность того, что случайным образом выбранный взрослый человек имеет рост 182 см {round(P, 4)}')

z=z_value(190)
print(f'Z значениe {z}для роста 190')
P=1-NormalDist().cdf(z)
print(f'Вероятность того, что случайным образом выбранный взрослый человек имеет рост 190 см {round(P, 4)}')

z1=z_value(166)
print(f'Z1 = {round(z1, 4)}')
z2=z_value(190)
print(f'Z2 = {round(z2, 4)}')
P=NormalDist().cdf(z2)-NormalDist().cdf(z1)
print(f'Вероятность того, что случайным образом выбранный взрослый человек имеет рост от 166 см до 190 см {round(P, 4)}')

z1=z_value(166)
print(f'Z1 = {round(z1, 4)}')
z2=z_value(182)
print(f'Z2 = {round(z2, 4)}')
P=NormalDist().cdf(z2)-NormalDist().cdf(z1)
print(f'Вероятность того, что случайным образом выбранный взрослый человек имеет рост от 166 см до 182 см {round(P, 4)}')

z1=z_value(158)
print(f'Z1 = {round(z1, 4)}')
z2=z_value(190)
print(f'Z2 = {round(z2, 4)}')
P=NormalDist().cdf(z2)-NormalDist().cdf(z1)
print(f'Вероятность того, что случайным образом выбранный взрослый человек имеет рост от 158 см до 190 см {round(P, 4)}')

z1=z_value(150)
print(f'Z1 = {round(z1, 4)}')
z2=z_value(198)
print(f'Z2 = {round(z2, 4)}')
P=NormalDist().cdf(z1)+(1-NormalDist().cdf(z2))
print(f'Вероятность того, что случайным образом выбранный взрослый человек имеет рост не выше 150 см или не ниже 198 см {round(P, 4)}')

# На сколько сигм (средних квадратичных отклонений) отклоняется рост человека, равный 190 см, от
# математического ожидания роста в популяции, в которой M(X) = 178 см и D(X) = 25 кв.см?

Z=(190-178)/25**(1/2)

print(f'Рост человека, равный 190 см, отклоняется от математического ожидания роста в популяции, \n'
      f'в которой M(X) = 178 см и D(X) = 25 кв.см на Z = {Z} сигм.')

"""# **Практическое задание к лекции 5.**"""

# Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью 0.95,
# если выборочная средняя M = 80, а объем выборки n = 256.

left=80-1.96*16/256**(1/2)
right=80+1.96*16/256**(1/2)
print(f'95%-й доверительный интервал для оценки мат. ожидания генеральной совокупности: [{left};{right}].')

# В результате 10 независимых измерений некоторой величины X, выполненных с одинаковой точностью,
# получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1

import numpy as np
import scipy.stats as stats

arr=np.array([6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1])
print(f'Среднее выборочное: {np.mean(arr): .2f},\n'
      f'Размер выборки n={len(arr)},\n'
      f'Среднее квадратическое отклонение по выборке(несмещенное): {np.std(arr, ddof=1): .2f}.'
     )
def t_from_table(confidens, len_array):
    alpha=(1-confidens)
    return stats.t.ppf(1-alpha/2, len_array-1)
print(f'Табличное значение t-критерия для 95%-го доверительного интервала данной выборки: {t_from_table(0.95, len(arr)): .3f}')
def confidens_int(arr, confidens):
    return round(np.mean(arr)-t_from_table(confidens,len(arr))*np.std(arr, ddof=1)/len(arr)**0.5,3), \
           round(np.mean(arr)+t_from_table(confidens,len(arr))*np.std(arr, ddof=1)/len(arr)**0.5,3)

print(f'95%-й доверительный интервал для истинного значения Х: {confidens_int(arr, 0.95)}.')

# Утверждается, что шарики для подшипников, изготовленные автоматическим станком, имеют средний диаметр 17 мм.
# Используя односторонний критерий с α=0,05, проверить эту гипотезу, если в выборке из n=100 шариков средний диаметр
# оказался равным 17.5 мм, а дисперсия известна и равна 4 мм.

z=(17.5-17)/0.2
print(f'Наблюдаемое значение z-критерия: {z: .4f}')
zt=stats.norm.ppf(0.95)
print(f'Табличное значение z-критерия: {zt: .4f}')
x = z<zt
if x == False:
  print('Гипотеза не верна')
else:
  print('Гипотеза верна')

# Продавец утверждает, что средний вес пачки печенья составляет 200 г.
# Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
# 202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
# Известно, что их веса распределены нормально.
# Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна 99%?

cookies=np.array([202, 203, 199, 197, 195, 201, 200, 204, 194, 190])
tn=(np.mean(cookies)-200)/(np.std(cookies,ddof=1)/len(cookies)**0.5)
print(f'Наблюдаемое значение t-критерия: {tn: .4f}')
tt=stats.t.ppf(0.995,len(cookies)-1)
print(f'Табличное значение t-критерия: {tt: .4f}')
x = np.abs(tn)<tt
if x == True:
  print('Утверждение верно')
else:
  print('Утверждение неверно')